#pragma once

enum class TrackingTransitionMode
{
	kPreset,
	kReactive,
	kDefault,
};

/// メモ書き
///	
/// 内部処理で使うもの↓
/// pair<state,Endframe>でこれを
/// std::map<string,pair>で管理かな？
/// 
/// 初期設定で決めるもの↓
/// TransitionMode：
/// Preset＝決まったテーブル形式、
/// Reactive＝弾の状態・対象とのコミュニケーションで判断
/// の形式差
/// 
/// 今後の広がり↓：技術的な強みを入れることを考える
/// 技術的強みの例
///		例：追加しやすい設計（実際にどういったことが出来たか
///			例文）追加しやすい設計にしたため、一日で何個も動きを追加できた。
///		例：
/// 
/// 画面上のXYで動きを大きく見せれるように工夫する
/// 
/// ミサイルについて
///		１つ１つに意思を持たせて個を意識できるように
///		現在は全てが一つの意思に見える
/// 
/// 追従属性の応じた違いを広げる
/// 追従属性の違い作成の案
///		追従中に変わった動きを入れることで違いを出す
///		属性の切り替わりを出来るようにしてもいいかも？
/// 
/// 敵の行動や形態を軽く作成して、ゲームの変化を加える
/// 例：半分で大きな攻撃を行ってくる（4つのファンネルを壊させるなど）
///		壊せた場合：怯みのターンを作る
///		壊せなかった場合：大技が来る（ビーム｜ファンネルからミサイル｜などなど）
/// 